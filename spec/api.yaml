openapi: 3.0.3
info:
  title: calpol
  description: Multi-Service health monitor
  contact:
    name: Jacob Halsey
    email: jacob@jhalsey.com
  license:
    name: ''
  version: 0.1.0
paths:
  /api/password_reset/:
    post:
      tags:
      - PasswordReset
      summary: Request a password reset token
      description: |
        Request a password reset token
      operationId: Request
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PasswordResetRequest'
        required: true
      responses:
        '200':
          description: Success
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
      security: []
  /api/password_reset/submit:
    post:
      tags:
      - PasswordReset
      summary: Submit a password reset token
      description: |
        Submit a password reset token
      operationId: Submit
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SubmitPasswordResetRequest'
        required: true
      responses:
        '200':
          description: Success
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
      security: []
  /api/runner/queue:
    post:
      tags:
      - Runner
      summary: Queue the test runner to immediately re-run.
      description: |
        Queue the test runner to immediately re-run.
      operationId: Queue
      responses:
        '200':
          description: Success
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
  /api/runner_logs:
    get:
      tags:
      - RunnerLogs
      summary: List the test runner logs
      description: |
        List the test runner logs
      operationId: ListRunnerLogs
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListRunnerLogsRequest'
        required: true
      responses:
        '200':
          description: List of test runner logs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListRunnerLogsResponse'
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
  /api/sessions:
    get:
      tags:
      - Sessions
      summary: List this users active sessions
      description: |
        List this users active sessions
      operationId: ListSessions
      responses:
        '200':
          description: List of sessions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListSessionsResponse'
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
  /api/sessions/login:
    post:
      tags:
      - Sessions
      summary: Login with email and password
      description: |
        Login with email and password
      operationId: Login
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
        required: true
      responses:
        '200':
          description: User account and session details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginResponse'
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
      security: []
  /api/sessions/logout:
    delete:
      tags:
      - Sessions
      summary: Logout (delete) session
      description: |
        Logout (delete) session
      operationId: Logout
      responses:
        '200':
          description: Success
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
  /api/sessions/{id}:
    delete:
      tags:
      - Sessions
      summary: Delete a session by id
      description: |
        Delete a session by id
      operationId: DeleteSession
      parameters:
      - name: id
        in: path
        description: Session id to delete
        required: true
        deprecated: false
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
  /api/test_results:
    get:
      tags:
      - TestResults
      summary: List test results
      description: |
        List test results
      operationId: ListTestResults
      responses:
        '200':
          description: List of test results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTestResultsResponse'
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
  /api/tests:
    get:
      tags:
      - Tests
      summary: List tests
      description: |
        List tests
      operationId: ListTests
      responses:
        '200':
          description: List of test results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListTestsResponse'
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
    post:
      tags:
      - Tests
      summary: Create a new test
      description: |
        Create a new test
      operationId: CreateTest
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTestRequest'
        required: true
      responses:
        '200':
          description: The created test
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestSummary'
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
  /api/tests/{name}:
    get:
      tags:
      - Tests
      summary: Retrieve a test
      description: |
        Retrieve a test
      operationId: GetTest
      parameters:
      - name: name
        in: path
        description: Test name to get
        required: true
        deprecated: false
        schema:
          type: string
      responses:
        '200':
          description: The created test
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestSummary'
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
    put:
      tags:
      - Tests
      summary: Update a test
      description: |
        Update a test
      operationId: UpdateTest
      parameters:
      - name: name
        in: path
        description: Test name to update
        required: true
        deprecated: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateTestRequest'
        required: true
      responses:
        '200':
          description: The created test
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TestSummary'
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
    delete:
      tags:
      - Tests
      summary: Delete a test
      description: |
        Delete a test
      operationId: DeleteTest
      parameters:
      - name: name
        in: path
        description: Test name to delete
        required: true
        deprecated: false
        schema:
          type: string
      responses:
        '200':
          description: Success
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
  /api/users:
    get:
      tags:
      - Users
      summary: List users
      description: |
        List users
      operationId: ListUsers
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ListUsersRequest'
        required: true
      responses:
        '200':
          description: List of test results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListUsersResponse'
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
    post:
      tags:
      - Users
      summary: Create a new user
      description: |
        Create a new user
      operationId: CreateUser
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUserRequest'
        required: true
      responses:
        '200':
          description: The created user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSummary'
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
  /api/users/{id}:
    get:
      tags:
      - Users
      summary: Get a user by id
      description: |
        Get a user by id
      operationId: GetUser
      parameters:
      - name: id
        in: path
        description: User ID to get
        required: true
        deprecated: false
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: The user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSummary'
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
    put:
      tags:
      - Users
      summary: Update a user
      description: |
        Update a user
      operationId: UpdateUser
      parameters:
      - name: id
        in: path
        description: User ID to update
        required: true
        deprecated: false
        schema:
          type: integer
          format: int32
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUserRequest'
        required: true
      responses:
        '200':
          description: The user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserSummary'
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
    delete:
      tags:
      - Users
      summary: Delete a user
      description: |
        Delete a user
      operationId: DeleteUser
      parameters:
      - name: id
        in: path
        description: User ID to delete
        required: true
        deprecated: false
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
  /api/users/{id}/test_email:
    post:
      tags:
      - Users
      summary: Send a test email to a user's email address
      description: |
        Send a test email to a user's email address
      operationId: SendTestEmail
      parameters:
      - name: id
        in: path
        description: User ID to send email to
        required: true
        deprecated: false
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
  /api/users/{id}/test_sms:
    post:
      tags:
      - Users
      summary: Send a test SMS message to a user's phone number
      description: |
        Send a test SMS message to a user's phone number
      operationId: SendTestSms
      parameters:
      - name: id
        in: path
        description: User ID to send SMS message to
        required: true
        deprecated: false
        schema:
          type: integer
          format: int32
      responses:
        '200':
          description: Success
        default:
          $ref: '#/components/responses/ApiError'
      deprecated: false
components:
  schemas:
    CreateTestRequest:
      type: object
      required:
      - name
      - config
      properties:
        config:
          type: object
        enabled:
          type: boolean
        failure_threshold:
          type: integer
          format: int32
        name:
          type: string
    CreateUserRequest:
      type: object
      required:
      - name
      - email
      properties:
        email:
          type: string
          format: email
        name:
          type: string
    ListRunnerLogsRequest:
      type: object
      properties:
        page_size:
          type: integer
          format: int32
        page_token:
          type: string
        sort_order:
          $ref: '#/components/schemas/SortOrder'
    ListRunnerLogsResponse:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/RunnerLog'
        next_page:
          type: string
    ListSessionsResponse:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Session'
    ListTestResultsResponse:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/TestResult'
    ListTestsResponse:
      type: object
      required:
      - items
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Test'
    ListUsersRequest:
      type: object
      properties:
        limit:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        search:
          type: string
    ListUsersResponse:
      type: object
      required:
      - items
      - total
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/User'
        total:
          type: integer
          format: int64
    LoginRequest:
      type: object
      required:
      - email
      - password
      properties:
        email:
          type: string
        password:
          type: string
          format: password
    LoginResponse:
      type: object
      required:
      - user
      - session
      - token
      properties:
        session:
          $ref: '#/components/schemas/Session'
        token:
          type: string
        user:
          $ref: '#/components/schemas/User'
    PasswordResetRequest:
      type: object
      required:
      - email
      properties:
        email:
          type: string
    RunnerLog:
      type: object
      required:
      - id
      - time_started
      - time_finished
      properties:
        failure:
          type: string
        id:
          type: integer
          format: int64
        tests_failed:
          type: integer
          format: int32
        tests_passed:
          type: integer
          format: int32
        tests_skipped:
          type: integer
          format: int32
        time_finished:
          type: string
          format: date-time
        time_started:
          type: string
          format: date-time
    Session:
      type: object
      required:
      - id
      - created
      - last_used
      - last_ip
      - user_agent
      properties:
        created:
          type: string
          format: date-time
        id:
          type: integer
          format: int32
        last_ip:
          type: string
        last_used:
          type: string
          format: date-time
        user_agent:
          type: string
    SortOrder:
      type: string
      enum:
      - Ascending
      - Descending
    SubmitPasswordResetRequest:
      type: object
      required:
      - token
      - new_password
      properties:
        new_password:
          type: string
          format: password
        token:
          type: string
    Test:
      type: object
      required:
      - name
      - config
      - enabled
      - failure_threshold
      - failing
      properties:
        config:
          type: object
        enabled:
          type: boolean
        failing:
          type: boolean
        failure_threshold:
          type: integer
          format: int32
        name:
          type: string
    TestResult:
      type: object
      required:
      - test_name
      - success
      - time_started
      - time_finished
      properties:
        failure_reason:
          type: string
        success:
          type: boolean
        test_name:
          type: string
        time_finished:
          type: string
          format: date-time
        time_started:
          type: string
          format: date-time
    UpdateTestRequest:
      type: object
      required:
      - config
      properties:
        config:
          type: object
        enabled:
          type: boolean
        failure_threshold:
          type: integer
          format: int32
    UpdateUserRequest:
      type: object
      required:
      - email
      properties:
        email:
          type: string
          format: email
        email_notifications:
          type: boolean
        name:
          type: string
        phone_number:
          type: string
          nullable: true
        sms_notifications:
          type: boolean
    User:
      type: object
      required:
      - id
      - name
      - email
      - sms_notifications
      - email_notifications
      properties:
        email:
          type: string
        email_notifications:
          type: boolean
        id:
          type: integer
          format: int32
        name:
          type: string
        phone_number:
          type: string
        sms_notifications:
          type: boolean
  responses:
    ApiError:
      description: An Api Problem (RFC7807)
      content:
        application/json:
          schema:
            type: object
            title: ApiError
            properties:
              detail:
                type: string
                description: |
                  A human readable explanation specific to this occurrence of the
                  problem.
                example: Connection to database timed out
              instance:
                type: string
                format: uri
                description: |-
                  An absolute URI that identifies the specific occurrence of the problem.
                  It may or may not yield further information if dereferenced.
              status:
                type: integer
                format: int32
                description: |
                  The HTTP status code generated by the origin server for this occurrence
                  of the problem.
                example: 503
              title:
                type: string
                description: |
                  A short, summary of the problem type. Written in english and readable
                  for engineers (usually not suited for non technical stakeholders and
                  not localized); example: Service Unavailable
              type:
                type: string
                format: uri
                description: |
                  An absolute URI that identifies the problem type.  When dereferenced,
                  it SHOULD provide human-readable documentation for the problem type
                  (e.g., using HTML).
  securitySchemes:
    basicAuth:
      type: http
      scheme: bearer
security:
- basicAuth: []
