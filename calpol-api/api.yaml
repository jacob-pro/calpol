---
openapi: 3.0.0
info:
  version: 1.0.0
  title: Calpol API
security:
  - basicAuth: []
components:
  securitySchemes:
    basicAuth:
      type: http
      scheme: bearer
  # Reusable responses, such as 401 Unauthorized or 400 Bad Request
  responses:
    ApiError:
      description: An Api Problem (RFC7807)
      content:
        application/json:
          schema:
            type: object
            title: ApiError
            additionalProperties: true
            properties:
              type:
                type: string
                format: uri
                description: |
                  An absolute URI that identifies the problem type.  When dereferenced,
                  it SHOULD provide human-readable documentation for the problem type
                  (e.g., using HTML).
              title:
                type: string
                description: |
                  A short, summary of the problem type. Written in english and readable
                  for engineers (usually not suited for non technical stakeholders and
                  not localized); example: Service Unavailable
              status:
                type: integer
                format: int32
                description: |
                  The HTTP status code generated by the origin server for this occurrence
                  of the problem.
                minimum: 100
                maximum: 600
                exclusiveMaximum: true
                example: 503
              detail:
                type: string
                description: |
                  A human readable explanation specific to this occurrence of the
                  problem.
                example: Connection to database timed out
              instance:
                type: string
                format: uri
                description: |
                  An absolute URI that identifies the specific occurrence of the problem.
                  It may or may not yield further information if dereferenced.
  # Reusable schemas (data models)
  schemas:
    PaginatedResponse:
      type: object
      required:
        - next_page
      properties:
        next_page:
          type: string
    User:
      type: object
      required:
        - id
        - name
        - email
        - sms_notifications
        - email_notifications
      properties:
        id:
          type: integer
          format: int32
        name:
          type: string
        email:
          type: string
        phone_number:
          type: string
        sms_notifications:
          type: boolean
        email_notifications:
          type: boolean
    Session:
      type: object
      required:
        - id
        - created
        - last_used
        - last_ip
        - user_agent
      properties:
        id:
          type: integer
          format: int32
        created:
          type: integer
          format: int64
        last_used:
          type: integer
          format: int64
        last_ip:
          type: string
        user_agent:
          type: string
paths:
  "/sessions/login":
    post:
      operationId: sessionsLogin
      tags:
        - sessions
      security: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              title: LoginRequest
              required:
                - email
                - password
              properties:
                email:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: The logged in user
          content:
            application/json:
              schema:
                type: object
                title: LoginResponse
                properties:
                  token:
                    type: string
                  user:
                    "$ref": "#/components/schemas/User"
                  session:
                    "$ref": "#/components/schemas/Session"
                required:
                  - token
                  - user
                  - session
        'default':
          "$ref": "#/components/responses/ApiError"
  "/sessions/logout":
    delete:
      operationId: sessionsLogout
      tags:
        - sessions
      responses:
        '200':
          description: Success
        'default':
          "$ref": "#/components/responses/ApiError"
  "/sessions":
    get:
      operationId: sessionsList
      tags:
        - sessions
      responses:
        '200':
          description: List of the users sessions
          content:
            application/json:
              schema:
                type: object
                title: SessionsListResponse
                allOf:
                  - "$ref": "#/components/schemas/PaginatedResponse"
                  - type: object
                    required:
                      - items
                    properties:
                      items:
                        type: array
                        items:
                          "$ref": "#/components/schemas/Session"
        'default':
          "$ref": "#/components/responses/ApiError"
  "/sessions/{id}":
    delete:
      operationId: sessionsDelete
      tags:
        - sessions
      security:
        - basicAuth: []
      description: Allows the user to delete a session from another device/browser
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: Success
        'default':
          "$ref": "#/components/responses/ApiError"

